<?php


namespace App\Tests\Functional\Pentest;


use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class SecureHeadersTest extends WebTestCase
{
    protected const FRONTEND_HOSTNAME = 'localhost';

    public function testXFrameOrigin()
    {
        $client = static::createClient();
        $client->request('GET', sprintf("http://%s/", self::FRONTEND_HOSTNAME));

        self::assertResponseHasHeader('X-Frame-Options');
        self::assertContains(strtolower($client->getResponse()->headers->get('X-Frame-Options')), ['deny', 'sameorigin']);
    }

    public function testXContentTypeOptions()
    {
        $client = static::createClient();
        $client->request('GET', sprintf("http://%s/", self::FRONTEND_HOSTNAME));

        self::assertResponseHeaderSame('X-Content-Type-Options', 'nosniff');
    }

    public function testStrictTransportSecurity()
    {
        $client = static::createClient();
        $client->request('GET', sprintf("http://%s/", self::FRONTEND_HOSTNAME));

        self::assertResponseHeaderSame('Strict-Transport-Security', 'max-age=31536000; includeSubDomains');
    }

    public function testContentSecurityPolicy()
    {
        $client = static::createClient();
        $client->request('GET', sprintf("http://%s/", self::FRONTEND_HOSTNAME));

        self::assertResponseHasHeader('Content-Security-Policy');
        self::assertResponseHeaderNotSame('Content-Security-Policy', '*');
    }

    public function testPermittedCrossDomainPolicies()
    {
        $client = static::createClient();
        $client->request('GET', sprintf("http://%s/", self::FRONTEND_HOSTNAME));

        self::assertResponseHeaderSame('X-Permitted-Cross-Domain-Policies', 'none');
    }

    public function testReferrerPolicy()
    {
        $client = static::createClient();
        $client->request('GET', sprintf("http://%s/", self::FRONTEND_HOSTNAME));

        self::assertResponseHeaderSame('Referrer-Policy', 'strict-origin-when-cross-origin');
    }
}